# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET   /                       controllers.Default.redirect(to = "http://horstmann.com/codecheck/index.html")

# Health check
GET  /health                  controllers.Application.health(request: Request)
POST /echo                    controllers.Application.echo(request: Request)

# Map static resources from the /public folder to the /assets URL path
GET  /assets/*file            controllers.Assets.versioned(path="/public", file: Asset)

GET	 /files						        controllers.Files.filesHTML(request: Request, repo: String ?= "ext", problem: String, ccu: String ?= null)
GET	 /files/:problem				  controllers.Files.filesHTML(request: Request, repo: String ?= "ext", problem: String, ccu: String ?= null)
GET  /files/:repo/:problem		controllers.Files.filesHTML(request: Request, repo: String, problem: String,          ccu: String ?= null)
POST /checkNJS					      controllers.Check.checkNJS(request: Request)
# GET called from interactive element with jsonp result--TODO: Does this still happen???
GET  /checkNJS					      controllers.Check.checkNJS(request: Request)

# From Hien's project, but this is potentially useful for others 
GET  /fileData                controllers.Files.fileData(request: Request, repo: String ?= "ext", problem: String, ccu: String ?= null)

# Classic HTML--TODO: is anyone still using it? Core Java?
POST /check						        controllers.Check.checkHTML(request: Request)

POST /uploadProblem                     controllers.Upload.uploadProblem(request: Request)
POST /uploadFiles                       controllers.Upload.uploadFiles(request: Request)
# TODO Legacy without /private
GET  /edit/:problem/:editKey            controllers.Upload.editKeySubmit(request: Request, problem: String, editKey: String)
GET  /private/problem/:problem/:editKey controllers.Upload.editKeySubmit(request: Request, problem: String, editKey: String)
POST /editedFiles/:problem/:editKey     controllers.Upload.editedFiles(request: Request, problem: String, editKey: String)
POST /editedProblem/:problem/:editKey   controllers.Upload.editedProblem(request: Request, problem: String, editKey: String)

# Legacy--TODO: Eliminate?
GET	 /codecheck/files						controllers.Files.filesHTML(request: Request, repo: String ?= "ext", problem: String, ccu: String ?= null)
GET	 /codecheck/files/:problem	controllers.Files.filesHTML(request: Request, repo: String ?= "ext", problem: String, ccu: String ?= null)
POST /codecheck/check						controllers.Check.checkHTML(request: Request)

# Assignments
# Student starts
GET  /assignment/:assignmentID                      controllers.Assignment.work(request: Request, assignmentID: String, ccid: String = null, key: String = null, isStudent: Boolean = true, newid: String ?= null)
# Student resumes
GET  /private/resume/:assignmentID/:ccid/:key       controllers.Assignment.work(request: Request, assignmentID: String, ccid: String, key: String, isStudent: Boolean = true, newid: String ?= null)
# Instructor views a student submission
GET  /private/submission/:assignmentID/:ccid/:key   controllers.Assignment.work(request: Request, assignmentID: String, ccid: String, key: String, isStudent: Boolean = false, newid: String ?= null)
# Instructor views an assignment for review/cloning
GET  /viewAssignment/:assignmentID                  controllers.Assignment.work(request: Request, assignmentID: String, ccid: String = null, key: String = null, isStudent: Boolean = false, newid: String ?= null)
# Instructor makes new assignment
GET  /newAssignment                                 controllers.Assignment.edit(request: Request, assignmentID: String = null, key: String = null)
# Instructor copies existing assignment 
GET  /copyAssignment/:assignmentID                  controllers.Assignment.edit(request: Request, assignmentID: String, key: String = null)
# Instructor edits existing assignment
GET  /private/editAssignment/:assignmentID/:key     controllers.Assignment.edit(request: Request, assignmentID: String, key: String)
GET  /private/assignment/:assignmentID/:key         controllers.Assignment.edit(request: Request, assignmentID: String, key: String)
# Instructor views submissions
GET  /private/viewSubmissions/:assignmentID/:key    controllers.Assignment.viewSubmissions(request: Request, assignmentID: String, key: String)

# Instructor saves assignment
POST /saveAssignment         controllers.Assignment.saveAssignment(request: Request)
# Student saves work
POST /saveWork               controllers.Assignment.saveWork(request: Request)

# LTI Launch 
POST /lti/assignment           controllers.LTIAssignment.launch(request: Request, assignmentID: String = null)
# LTI Launch with POST to student URL
POST /assignment/:assignmentID controllers.LTIAssignment.launch(request: Request, assignmentID: String)

# Student saves work 
POST /lti/saveWork           controllers.LTIAssignment.saveWork(request: Request)
# Student request sending score to LMS
POST /lti/sendScore          controllers.LTIAssignment.sendScore(request: Request)
# Instructor views submissions
POST /lti/viewSubmissions    controllers.LTIAssignment.viewSubmissions(request: Request)
# Canvas call to createAssignment (resource selection)
POST /lti/createAssignment   controllers.LTIAssignment.createAssignment(request: Request)
# Instructor saves assignment
POST /lti/saveAssignment     controllers.LTIAssignment.saveAssignment(request: Request)

# Instructor views submissions
GET  /lti/viewSubmissions    controllers.LTIAssignment.viewSubmissions(request: Request)
# Instructor views a submission
GET  /lti/viewSubmission/:workID controllers.LTIAssignment.viewSubmission(request: Request, workID: String)
# Instructor edits current assignment
GET  /lti/editAssignment     controllers.LTIAssignment.editAssignment(request: Request)

# Shows LMS config XML
GET /lti/config              controllers.LTIAssignment.config(request: Request)
